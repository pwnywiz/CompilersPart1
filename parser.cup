/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, MINUS, TIMES, LPAREN, RPAREN, EQUAL, COMMA, RBRACE, LBRACE, IF, ELSE;
terminal Integer    NUMBER;        // our scanner provides numbers as integers
terminal String     STR, STRING_LITERAL;

/*  Non terminals */
non terminal            expr_list;
non terminal String     def, body, arg1, arg2;

/**
 *  Precedence Declarations
 */
precedence left PLUS, MINUS;
precedence left TIMES;
// precedence left COMMA;

/**
 *  The Grammar Rules
 */
 /*
expr_list ::= expr_list expr:e SEMI         {: System.out.println(e);:}
            | expr:e SEMI                   {: System.out.println(e);:}
;
expr      ::= expr:e1 PLUS  expr:e2         {: RESULT = e1+e2;       :}
             | expr:e1 MINUS expr:e2        {: RESULT = e1-e2;       :}
             | expr:e1 TIMES expr:e2        {: RESULT = e1*e2;       :}
             | MINUS expr:e                 {: RESULT = -e;          :}
             | LPAREN expr:e RPAREN	        {: RESULT = e;           :}
             | NUMBER:n	                    {: RESULT = n;           :}
             ;
*/

expr_list  ::= expr_list definition:d                        {: System.out.println(d);:}
             |
             ;

def        ::= STR:s LPAREN arg1:a1 RPAREN LBRACE body:b RBRACE     {: RESULT = "(" + "define " + " (" + s  + a1 + ") " + ")"; :}
             ;

arg1       ::= arg1:a1 STR:s                                 {: RESULT = a1 + " " + s;           :}
             | arg1:a1 COMMA                                 {: RESULT = a1;                     :}
             |                                               {: RESULT = "";                     :}
             ;

arg2       ::= arg2:a2 STRING_LITERAL:sl                     {: RESULT = a2 + " \"" + sl + "\""; :}
             | arg2:a2 COMMA                                 {: RESULT = a2;                     :}
             |                                               {: RESULT = "";                     :}
             ;

body       ::=                                  {: RESULT =            :}
             |                                  {: RESULT = ;                     :}
             |                                               {: RESULT = "";                     :}
             ;
